#!/usr/bin/env python3

import os
import selectors
import socket
import sys

class Conn:
    def __init__(self, sock, sel):
        self.sock = sock
        self.sel = sel
        self.rx = b""
        self.tx = b""
        self.sel.register(self.sock, selectors.EVENT_READ)

    def close(self):
        self.sel.unregister(self.sock)
        self.sock.close()

    def register(self):
        events = selectors.EVENT_READ
        if self.tx:
            events |= selectors.EVENT_WRITE
        self.sel.modify(self.sock, events)

    def sync(self, mask):
        if mask & selectors.EVENT_READ:
            data = self.sock.recv(1024)
            if data:
                self.rx += data
            else:
                return False
        if mask & selectors.EVENT_WRITE:
            sent = self.sock.send(self.tx)
            self.tx = self.tx[sent:]
            self.register()
        return True

    def recv(self):
        end = self.rx.rfind(b"\x1e")
        if end == -1:
            return []
        msgs = [msg.split(b"\x1f") for msg in self.rx[:end].split(b"\x1e")]
        self.rx = self.rx[end+1:]
        return msgs

    def send(self, msgs):
        msgs = [b"\x1f".join(fields) for fields in msgs]
        self.tx += b"\x1e".join(msgs) + b"\x1e"
        self.register()

conns = {}
sel = selectors.DefaultSelector()

if len(sys.argv) == 1:
    # server
    sock = socket.create_server(("127.0.0.1", 0))
    if os.fork() != 0:
        print(f"ACMEVIMPORT={sock.getsockname()[1]}; export ACMEVIMPORT;")
        sys.exit()
    os.setsid()
    fd = os.open(os.devnull, os.O_RDWR)
    os.dup2(fd, 0)
    os.dup2(fd, 1)
    os.dup2(fd, 2)
    if fd > 2:
        os.close(fd)
    sel.register(sock, selectors.EVENT_READ)

    def process():
        for src in conns.values():
            msgs = src.recv()
            if len(msgs) > 0:
                for dst in conns.values():
                    if dst != src:
                        dst.send(msgs)

else:
    # client
    src = bytes(str(os.getpid()), "utf8")
    dst = bytes(str(int(os.environ.get("ACMEVIMPID", ""))), "utf8")
    port = int(os.environ.get("ACMEVIMPORT", ""))
    sock = socket.create_connection(("127.0.0.1", port), timeout=None)
    conn = Conn(sock, sel)
    conns[sock.fileno()] = conn
    if sys.argv[1] == '-c':
        bufs = [bytes(arg, "utf8") for arg in sys.argv[2:]]
        conn.send([[dst, src, b"clear"] + bufs])
        def handle(msg):
            if len(msg) == 1 and msg[0] == b"cleared":
                sys.exit()
    elif sys.argv[1] == '-l':
    	args = [bytes(arg, "utf8") for arg in sys.argv[2:]]
    	conn.send([[dst, src, b"setline"] + args])
    	def handle(msg):
    	    if len(msg) == 1 and msg[0] == b"lineset":
    	        sys.exit()
    elif sys.argv[1] == '-s':
    	args = [bytes(arg, "utf8") for arg in sys.argv[2:]]
    	conn.send([[dst, src, b"scratch"] + args])
    	def handle(msg):
    	    if len(msg) == 1 and msg[0] == b"scratched":
    	        sys.exit()
    else:
        files = {bytes(os.path.abspath(arg), "utf8"): 1 for arg in sys.argv[1:]}
        conn.send([[dst, src, b"edit"] + list(files.keys())])
        def handle(msg):
            if len(msg) > 1 and msg[0] == b"done":
                for f in msg[1:]:
                    if f in files:
                        del files[f]
            if len(files) == 0:
                sys.exit()

    def process():
        if len(conns) == 0:
            sys.exit("connection lost")
        for msg in conn.recv():
            if len(msg) > 1 and msg[0] == src and msg[1] == dst:
            	handle(msg[2:])

while True:
    events = sel.select(timeout=None)
    for key, mask in events:
        if key.fileobj.fileno() in conns:
            conn = conns[key.fileobj.fileno()]
            if not conn.sync(mask):
                del conns[key.fileobj.fileno()]
                conn.close()
        else:
            sock, addr = key.fileobj.accept()
            conns[sock.fileno()] = Conn(sock, sel)
    process()
